import {
  Body,
  Controller,
  Get,
  HttpCode,
  HttpStatus,
  Param,
  Patch,
  Post,
  Req,
  UseGuards,
} from '@nestjs/common';
import { AuthGuard } from '@nestjs/passport';
import {
  ApiBearerAuth,
  ApiHeader,
  ApiOkResponse,
  ApiOperation,
  ApiTags,
} from '@nestjs/swagger';
import { Request } from 'express';
import { ChangePasswordDto } from 'src/auth/dtos/auth/changePassword.dto';
import { ForgotPasswordDto } from 'src/auth/dtos/auth/forgotPassword.dto';
import { LoginDto } from 'src/auth/dtos/auth/login.dto';
import { LogoutDto } from 'src/auth/dtos/auth/logout.dto';
import { ResetPasswordDto } from 'src/auth/dtos/auth/resetPassword.dto';
import { AuthService } from 'src/auth/services/auth/auth.services';
import { LoginResponse } from 'src/auth/types/response.type';
@ApiTags('authentication')
@Controller('auth')
export class AuthController {
  constructor(private authservice: AuthService) {}
  // @Post('/signup')
  // @HttpCode(HttpStatus.CREATED)
  // @ApiOkResponse({
  //   description: 'User has been created.',
  // })
  // @ApiOperation({ summary: 'Create a new user', deprecated: true })
  // async signupLocal(@Body() userBody: SignupDto) {
  //   return await this.authservice.signupLocal(userBody);
  // }

  @Get('/verifyUser/:token')
  @HttpCode(HttpStatus.OK)
  @ApiOperation({ summary: 'Endpoint to verify a user after signing up' })
  async verifyUser(@Param('token') token: string) {
    await this.authservice.verifyNewCreatedUser(token);
    return { status: 'Success', message: 'User verified ' };
  }

  @Post('/login')
  @HttpCode(HttpStatus.OK)
  @ApiOperation({
    summary: 'Log user in the system by generating tokens',
    deprecated: true,
  })
  @ApiOkResponse({
    description: 'The record has been successfully created.',
    type: LoginResponse,
  })
  async signinLocal(@Body() userBody: LoginDto): Promise<LoginResponse> {
    return await this.authservice.signinLocal(userBody);
  }

  @HttpCode(HttpStatus.OK)
  @ApiOperation({
    summary: 'Log user in the system by generating tokens',
  })
  @Post('/resendVerificationEmail/:email')
  async resendEmail(@Param('email') email: string) {
    return await this.authservice.resendVerificationEmail(email);
  }

  @Post('/forgotPasswordClient')
  @HttpCode(HttpStatus.OK)
  @ApiOperation({ summary: 'Send email to reset password' })
  async forgotPassword(@Body() userBody: ForgotPasswordDto) {
    await this.authservice.forgotPasswordClient(userBody);

    return {
      status: 'Success',
      message: 'Mail sent to your registered Email on client account',
    };
  }

  @Post('/forgotPasswordInstructor')
  @HttpCode(HttpStatus.OK)
  @ApiOperation({ summary: 'Send email to reset password to instructor' })
  async forgotPasswordInstructor(@Body() userBody: ForgotPasswordDto) {
    await this.authservice.forgotPasswordInstructor(userBody);

    return {
      status: 'Success',
      message: 'Mail sent to your registered Email',
    };
  }

  @Post('/resetPassword')
  @HttpCode(HttpStatus.OK)
  @ApiOperation({
    summary:
      'Set the new password using the token generated by the forget password api',
  })
  async resetPassword(@Body() userBody: ResetPasswordDto) {
    await this.authservice.resetPassword(userBody);
    return {
      status: 'Success',
      message: 'Password reset successful',
    };
  }

  @UseGuards(AuthGuard('jwt'))
  @Post('/logout')
  @HttpCode(HttpStatus.OK)
  @ApiOperation({ summary: 'Logs the user out of the system' })
  @ApiBearerAuth()
  async logout(@Req() req: Request, @Body() logoutDto: LogoutDto) {
    await this.authservice.logout(req.user['sub'], logoutDto);
    return { status: 'Success', message: 'User Logged Out !' };
  }

  @UseGuards(AuthGuard('jwt-refresh'))
  @Post('/refresh')
  @ApiBearerAuth()
  @HttpCode(HttpStatus.OK)
  @ApiOperation({ summary: 'Generate new tokens' })
  @ApiHeader({
    name: 'Authorization',
    description: 'Refresh token . Example "Bearer {token}"',
    example: 'Bearer <token>',
    allowEmptyValue: false,
    required: true,
  })
  async refreshToken(@Req() req: Request) {
    const user = req.user;
    return await this.authservice.refreshToken(
      user['sub'],
      user['refreshToken'],
    );
  }

  @UseGuards(AuthGuard('jwt'))
  @Patch('/changePassword')
  @ApiBearerAuth()
  @ApiOperation({
    summary: 'Change password by providing old and new credentials',
  })
  @HttpCode(HttpStatus.OK)
  async changePassword(
    @Req() req: Request,
    @Body() userBody: ChangePasswordDto,
  ) {
    const user = req.user;
    await this.authservice.changePassword(user['sub'], userBody);
    return {
      status: 'Success',
      message: 'Password changed',
    };
  }

  @Get('/testEndpointAuth')
  @ApiOperation({
    summary: 'Test endpoint that prints current time',
  })
  @HttpCode(HttpStatus.OK)
  async testEnpoint() {
    const now = new Date();
    return now;
  }
}
